name: Build OpenWrt Packages

on:
  workflow_dispatch:

jobs:
  build_luci:
    name: Build luci
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - sdk_ver: "21.02"
            luci_ver: "19.07"
            sdk_url: "https://downloads.openwrt.org/releases/21.02.7/targets/x86/64/openwrt-sdk-21.02.7-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz"
          - sdk_ver: "24.10"
            luci_ver: "24.10"
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/x86/64/openwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install build tools
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          echo "Installing build tools..."
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget xz-utils zstd gettext-base
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt SDK 
        id: cache-sdk-luci
        uses: actions/cache@v4
        with:
          path: sdk_luci
          key: openwrt-luci-${{ matrix.sdk_ver }}-x86_64

      - name: Download and extract OpenWrt SDK
        if: steps.cache-sdk-luci.outputs.cache-hit != 'true'
        run: |
          mkdir -p sdk_luci
          cd sdk_luci
          wget "${{ matrix.sdk_url }}"
          file_name=$(basename "${{ matrix.sdk_url }}")
          if [[ "$file_name" == *.zst ]]; then
            tar --zstd -xf "$file_name" --strip-components=1
          else
            tar -xf "$file_name" --strip-components=1
          fi
          cd ..

      - name: Update feeds & install luci package
        run: |
          cd sdk_luci
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}" >> feeds.conf
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.luci_ver }}" >> feeds.conf
          echo "src-link nps $GITHUB_WORKSPACE" > feeds.conf

          ./scripts/feeds update -a
          echo "CONFIG_PACKAGE_luci-app-npc=m" > .config
          ./scripts/feeds install -d n luci-app-npc
          make package/luci-app-npc/download -j8

      - name: Pre-generate configuration
        run: |
          cd sdk_luci
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-npc=m" > .config
          make defconfig

      - name: Build luci package
        run: |
          cd sdk_luci
          make package/luci-app-npc/{clean,compile} -j$(nproc) V=s

      - name: Collect luci ipk
        run: |
          cd sdk_luci
          mkdir -p ../release/luci
          cp bin/packages/*/nps/luci*.ipk ../release/luci/

      - name: Upload luci artifacts
        uses: actions/upload-artifact@v4
        with:
          name: luci-${{ matrix.luci_ver }}-${{ matrix.sdk_ver }}
          path: release/luci/*.ipk

  build_bin:
    name: Build bin
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: amd64
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/x86/64/openwrt-sdk-24.10.0-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: aarch64_generic
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/rockchip/armv8/openwrt-sdk-24.10.0-rockchip-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: aarch64_cortex-a53
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/mvebu/cortexa53/openwrt-sdk-24.10.0-mvebu-cortexa53_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: aarch64_cortex-a72
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/mvebu/cortexa72/openwrt-sdk-24.10.0-mvebu-cortexa72_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a5_vfpv4
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/at91/sama5/openwrt-sdk-24.10.0-at91-sama5_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a7
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/mediatek/mt7629/openwrt-sdk-24.10.0-mediatek-mt7629_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a7_neon-vfpv4
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/sunxi/cortexa7/openwrt-sdk-24.10.0-sunxi-cortexa7_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a8_vfpv3
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/sunxi/cortexa8/openwrt-sdk-24.10.0-sunxi-cortexa8_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a9
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/bcm53xx/generic/openwrt-sdk-24.10.0-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a9_neon
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/zynq/generic/openwrt-sdk-24.10.0-zynq-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a9_vfpv3-d16
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/mvebu/cortexa9/openwrt-sdk-24.10.0-mvebu-cortexa9_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: arm_cortex-a15_neon-vfpv4
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/ipq806x/generic/openwrt-sdk-24.10.0-ipq806x-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: mips_24kc
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/ath79/generic/openwrt-sdk-24.10.0-ath79-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: mips_4kec
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/realtek/rtl838x/openwrt-sdk-24.10.0-realtek-rtl838x_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: mips_mips32
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/bcm53xx/generic/openwrt-sdk-24.10.0-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: mipsel_24kc
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/ramips/rt288x/openwrt-sdk-24.10.0-ramips-rt288x_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: mipsel_74kc
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/ramips/rt3883/openwrt-sdk-24.10.0-ramips-rt3883_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
          - platform: mipsel_mips32
            sdk_url: "https://downloads.openwrt.org/releases/24.10.0/targets/bcm47xx/generic/openwrt-sdk-24.10.0-bcm47xx-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
            sdk_ver: "24.10"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          version=$(grep '^PKG_VERSION:=' npc/Makefile | cut -d= -f2 | xargs)
          echo "NPCPKG_VERSION=$version" >> $GITHUB_ENV
          echo "npc version: $version"

      - name: Install build tools
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          echo "Installing build tools..."
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev python3-distutils python3-setuptools rsync swig unzip zlib1g-dev file wget xz-utils zstd gettext-base
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache OpenWrt SDK
        id: cache-sdk-bin
        uses: actions/cache@v4
        with:
          path: sdk_bin
          key: openwrt-bin-${{ matrix.platform }}-${{ matrix.sdk_ver }}

      - name: Download and extract OpenWrt SDK - ${{ matrix.platform }}
        if: steps.cache-sdk-bin.outputs.cache-hit != 'true'
        run: |
          mkdir -p sdk_bin
          cd sdk_bin
          wget "${{ matrix.sdk_url }}"
          file_name=$(basename "${{ matrix.sdk_url }}")
          if [[ "$file_name" == *.zst ]]; then
            tar --zstd -xf "$file_name" --strip-components=1
          else
            tar -xf "$file_name" --strip-components=1
          fi
          cd ..

      - name: Update feeds & install bin package
        run: |
          cd sdk_bin
          echo "src-link nps $GITHUB_WORKSPACE" > feeds.conf

          ./scripts/feeds update -a
          echo "CONFIG_PACKAGE_npc=m" > .config
          ./scripts/feeds install -d n npc
          make package/npc/download -j8

      - name: Pre-generate configuration
        run: |
          cd sdk_bin
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_PACKAGE_npc=m" > .config
          make defconfig

      - name: Build bin package for ${{ matrix.platform }}
        run: |
          cd sdk_bin
          make package/npc/{clean,compile} -j$(nproc) V=s

      - name: Collect bin ipk for ${{ matrix.platform }}
        run: |
          cd sdk_bin
          mkdir -p ../release/bin/${{ matrix.platform }}
          cp bin/packages/*/nps/*.ipk ../release/bin/${{ matrix.platform }}/

      - name: Upload bin artifacts for ${{ matrix.platform }}
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.platform }}-${{ env.NPCPKG_VERSION }}
          path: release/bin/${{ matrix.platform }}/*.ipk
